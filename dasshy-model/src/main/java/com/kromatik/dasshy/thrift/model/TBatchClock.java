/**
 * Dasshy - Real time and Batch Analytics Open Source System
 * Copyright (C) 2016 Kromatik Solutions (http://kromatiksolutions.com)
 *
 * This file is part of Dasshy
 *
 * Dasshy is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 *
 * Dasshy is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Dasshy.  If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kromatik.dasshy.thrift.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class TBatchClock extends org.apache.thrift.TUnion<TBatchClock, TBatchClock._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBatchClock");
  private static final org.apache.thrift.protocol.TField STREAMING_FIELD_DESC = new org.apache.thrift.protocol.TField("streaming", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField N_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("nTimes", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField N_TIMES_BACKOFF_FIELD_DESC = new org.apache.thrift.protocol.TField("nTimesBackoff", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STREAMING((short)1, "streaming"),
    N_TIMES((short)2, "nTimes"),
    N_TIMES_BACKOFF((short)3, "nTimesBackoff");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STREAMING
          return STREAMING;
        case 2: // N_TIMES
          return N_TIMES;
        case 3: // N_TIMES_BACKOFF
          return N_TIMES_BACKOFF;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STREAMING, new org.apache.thrift.meta_data.FieldMetaData("streaming", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TStreamingBatchClock")));
    tmpMap.put(_Fields.N_TIMES, new org.apache.thrift.meta_data.FieldMetaData("nTimes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TBatchClockN")));
    tmpMap.put(_Fields.N_TIMES_BACKOFF, new org.apache.thrift.meta_data.FieldMetaData("nTimesBackoff", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TBatchClockNBackoff")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBatchClock.class, metaDataMap);
  }

  public TBatchClock() {
    super();
  }

  public TBatchClock(_Fields setField, Object value) {
    super(setField, value);
  }

  public TBatchClock(TBatchClock other) {
    super(other);
  }
  public TBatchClock deepCopy() {
    return new TBatchClock(this);
  }

  public static TBatchClock streaming(TStreamingBatchClock value) {
    TBatchClock x = new TBatchClock();
    x.setStreaming(value);
    return x;
  }

  public static TBatchClock nTimes(TBatchClockN value) {
    TBatchClock x = new TBatchClock();
    x.setNTimes(value);
    return x;
  }

  public static TBatchClock nTimesBackoff(TBatchClockNBackoff value) {
    TBatchClock x = new TBatchClock();
    x.setNTimesBackoff(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case STREAMING:
        if (value instanceof TStreamingBatchClock) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TStreamingBatchClock for field 'streaming', but got " + value.getClass().getSimpleName());
      case N_TIMES:
        if (value instanceof TBatchClockN) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TBatchClockN for field 'nTimes', but got " + value.getClass().getSimpleName());
      case N_TIMES_BACKOFF:
        if (value instanceof TBatchClockNBackoff) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TBatchClockNBackoff for field 'nTimesBackoff', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case STREAMING:
          if (field.type == STREAMING_FIELD_DESC.type) {
            TStreamingBatchClock streaming;
            streaming = new TStreamingBatchClock();
            streaming.read(iprot);
            return streaming;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case N_TIMES:
          if (field.type == N_TIMES_FIELD_DESC.type) {
            TBatchClockN nTimes;
            nTimes = new TBatchClockN();
            nTimes.read(iprot);
            return nTimes;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case N_TIMES_BACKOFF:
          if (field.type == N_TIMES_BACKOFF_FIELD_DESC.type) {
            TBatchClockNBackoff nTimesBackoff;
            nTimesBackoff = new TBatchClockNBackoff();
            nTimesBackoff.read(iprot);
            return nTimesBackoff;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case STREAMING:
        TStreamingBatchClock streaming = (TStreamingBatchClock)value_;
        streaming.write(oprot);
        return;
      case N_TIMES:
        TBatchClockN nTimes = (TBatchClockN)value_;
        nTimes.write(oprot);
        return;
      case N_TIMES_BACKOFF:
        TBatchClockNBackoff nTimesBackoff = (TBatchClockNBackoff)value_;
        nTimesBackoff.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case STREAMING:
          TStreamingBatchClock streaming;
          streaming = new TStreamingBatchClock();
          streaming.read(iprot);
          return streaming;
        case N_TIMES:
          TBatchClockN nTimes;
          nTimes = new TBatchClockN();
          nTimes.read(iprot);
          return nTimes;
        case N_TIMES_BACKOFF:
          TBatchClockNBackoff nTimesBackoff;
          nTimesBackoff = new TBatchClockNBackoff();
          nTimesBackoff.read(iprot);
          return nTimesBackoff;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case STREAMING:
        TStreamingBatchClock streaming = (TStreamingBatchClock)value_;
        streaming.write(oprot);
        return;
      case N_TIMES:
        TBatchClockN nTimes = (TBatchClockN)value_;
        nTimes.write(oprot);
        return;
      case N_TIMES_BACKOFF:
        TBatchClockNBackoff nTimesBackoff = (TBatchClockNBackoff)value_;
        nTimesBackoff.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case STREAMING:
        return STREAMING_FIELD_DESC;
      case N_TIMES:
        return N_TIMES_FIELD_DESC;
      case N_TIMES_BACKOFF:
        return N_TIMES_BACKOFF_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public TStreamingBatchClock getStreaming() {
    if (getSetField() == _Fields.STREAMING) {
      return (TStreamingBatchClock)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'streaming' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStreaming(TStreamingBatchClock value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STREAMING;
    value_ = value;
  }

  public TBatchClockN getNTimes() {
    if (getSetField() == _Fields.N_TIMES) {
      return (TBatchClockN)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'nTimes' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setNTimes(TBatchClockN value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.N_TIMES;
    value_ = value;
  }

  public TBatchClockNBackoff getNTimesBackoff() {
    if (getSetField() == _Fields.N_TIMES_BACKOFF) {
      return (TBatchClockNBackoff)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'nTimesBackoff' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setNTimesBackoff(TBatchClockNBackoff value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.N_TIMES_BACKOFF;
    value_ = value;
  }

  public boolean isSetStreaming() {
    return setField_ == _Fields.STREAMING;
  }


  public boolean isSetNTimes() {
    return setField_ == _Fields.N_TIMES;
  }


  public boolean isSetNTimesBackoff() {
    return setField_ == _Fields.N_TIMES_BACKOFF;
  }


  public boolean equals(Object other) {
    if (other instanceof TBatchClock) {
      return equals((TBatchClock)other);
    } else {
      return false;
    }
  }

  public boolean equals(TBatchClock other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(TBatchClock other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
